name: 'Taskmaster Watcher'
description: 'Monitor issue dependencies and update blocked status'

on:
  issues:
    types: [closed, reopened]
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  update-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Update issue dependencies
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Get all open issues with 'task' label
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'task',
              per_page: 100
            });
            
            console.log(`Found ${issues.length} task issues`);
            
            for (const issue of issues) {
              const body = issue.body || '';
              
              // Extract YAML front-matter to find dependencies
              const yamlMatch = body.match(/^---\n([\s\S]*?)\n---/);
              if (!yamlMatch) continue;
              
              try {
                const yamlContent = yamlMatch[1];
                const dependenciesMatch = yamlContent.match(/dependents:\s*\[(.*?)\]/);
                
                if (dependenciesMatch) {
                  const dependencies = dependenciesMatch[1]
                    .split(',')
                    .map(dep => dep.trim().replace(/['"]/g, ''))
                    .filter(dep => dep);
                  
                  console.log(`Issue #${issue.number} has dependencies: ${dependencies}`);
                  
                  // Check if all dependencies are closed
                  let allDependenciesClosed = true;
                  for (const depId of dependencies) {
                    try {
                      const { data: depIssue } = await github.rest.issues.get({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: parseInt(depId)
                      });
                      
                      if (depIssue.state === 'open') {
                        allDependenciesClosed = false;
                        break;
                      }
                    } catch (error) {
                      console.log(`Could not find dependency issue #${depId}`);
                      allDependenciesClosed = false;
                      break;
                    }
                  }
                  
                  // Update blocked label based on dependency status
                  const hasBlockedLabel = issue.labels.some(label => 
                    typeof label === 'string' ? label === 'blocked' : label.name === 'blocked'
                  );
                  
                  if (allDependenciesClosed && hasBlockedLabel) {
                    console.log(`Removing blocked label from issue #${issue.number}`);
                    await github.rest.issues.removeLabel({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      name: 'blocked'
                    });
                  } else if (!allDependenciesClosed && !hasBlockedLabel) {
                    console.log(`Adding blocked label to issue #${issue.number}`);
                    await github.rest.issues.addLabels({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue.number,
                      labels: ['blocked']
                    });
                  }
                }
              } catch (error) {
                console.log(`Error processing issue #${issue.number}: ${error.message}`);
              }
            }