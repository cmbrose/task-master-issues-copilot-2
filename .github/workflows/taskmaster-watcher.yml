name: Task Dependency Watcher

on:
  issues:
    types: [closed]
  schedule:
    - cron: '*/10 * * * *'  # Every 10 minutes
  workflow_dispatch:

permissions:
  issues: write
  contents: read

jobs:
  update-blocked-tasks:
    runs-on: ubuntu-latest
    name: Remove blocked labels when dependencies are resolved
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Update blocked task labels
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            
            // Get all open issues with 'blocked' label
            const blockedIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              state: 'open',
              labels: 'blocked',
              per_page: 100
            });
            
            console.log(`Found ${blockedIssues.data.length} blocked issues`);
            
            for (const issue of blockedIssues.data) {
              try {
                // Parse YAML front-matter to get dependencies
                const body = issue.body || '';
                const yamlMatch = body.match(/^---\n([\s\S]*?)\n---/);
                
                if (!yamlMatch) continue;
                
                const yaml = yamlMatch[1];
                const dependsOnMatch = yaml.match(/depends_on:\s*\[(.*?)\]/);
                
                if (!dependsOnMatch) continue;
                
                const dependencies = dependsOnMatch[1]
                  .split(',')
                  .map(dep => dep.trim().replace(/['"]/g, ''))
                  .filter(dep => dep);
                
                if (dependencies.length === 0) continue;
                
                // Check if all dependencies are closed
                let allClosed = true;
                for (const depId of dependencies) {
                  try {
                    const depIssue = await github.rest.issues.get({
                      owner,
                      repo,
                      issue_number: parseInt(depId)
                    });
                    
                    if (depIssue.data.state !== 'closed') {
                      allClosed = false;
                      break;
                    }
                  } catch (error) {
                    console.log(`Dependency issue #${depId} not found, treating as resolved`);
                  }
                }
                
                if (allClosed) {
                  // Remove blocked label
                  await github.rest.issues.removeLabel({
                    owner,
                    repo,
                    issue_number: issue.number,
                    name: 'blocked'
                  });
                  
                  console.log(`Removed 'blocked' label from issue #${issue.number}`);
                  
                  // Add comment about unblocking
                  await github.rest.issues.createComment({
                    owner,
                    repo,
                    issue_number: issue.number,
                    body: 'ðŸŽ‰ This issue has been unblocked! All dependencies have been resolved.'
                  });
                }
              } catch (error) {
                console.error(`Error processing issue #${issue.number}:`, error);
              }
            }